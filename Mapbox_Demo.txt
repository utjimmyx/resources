---
title: "Trade area analyis and logistics planning using Mapbox"
author: "zhenning Jimmy xu, follow me on Twitter: https://twitter.com/MKTJimmyxu"
date: "10/15/2020"
output: html_document
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
```

## Introduction

This tutorial (case study) is built using R and the Mapbox api.

In this case study, you will find the trade area available for the CSUB community and identify logistics solutions (e.g.,last-mile delivery solutions) or retail opportunities using Mapbox.

You can do more with Mapbox. For instance, Uber is partnering with Mapbox to design its advanced API ecosystems.

“Collaborating on open-source projects can build relationships between companies in the context of pure engineering, where individuals contribute to making software work better, not only benefitting the individual companies involved, but anyone else who might have a use for the tool.”
-Nicolas Garcia Belmonte, Head of Visualization at Uber

**Mapbox + kepler.gl - Partnering with Uber to bring advanced data visualization to our developer community**

https://blog.mapbox.com/hello-mapbox-and-keplergl-4d71fc8e1d02

**see which companies are using R**

https://github.com/ThinkR-open/companies-using-r

https://appsilon.com/

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.


## Installing packages and dependencies

To get started with mapboxapi, you'll need to first install some packages. mapboxapi was just released to CRAN this week, so we can install with `install.packages()`:

```{r install-mapboxapi, eval = FALSE}
install.packages("mapboxapi", dependencies = TRUE)
```

If you've been working with R Spatial packages before, installation should go smoothly.  If you are new to R/R Spatial, you may need to do some configuration prior to successful installation of the package.  mapboxapi depends heavily on the [sf](https://github.com/r-spatial/sf) package for spatial data processing in R.  On Ubuntu, use the following commands in a terminal to install required dependencies: 

```bash
sudo add-apt-repository ppa:ubuntugis/ubuntugis-unstable
sudo apt-get update
sudo apt-get install -y libudunits2-dev libgdal-dev libgeos-dev libproj-dev 
```

mapboxapi also uses the [protolite](https://github.com/jeroen/protolite) package for interacting with Mapbox vector tiles and the [magick](https://github.com/ropensci/magick) package for image processing and display.  On Ubuntu, install dependencies with:

```bash
sudo apt-get install -y libprotobuf-dev protobuf-compiler libmagick++-dev
```

Instructions for other Linux distributions can be found on the package websites linked above.  

To run all of the examples in this workshop, you'll also need to install the following packages that don't get picked up as mapboxapi dependencies:

```{r install-packages, eval = FALSE}
#install.packages(c("shiny", "fasterize", "tidycensus", "tidyverse"))
```


## Setting up your Mapbox account

Before we get started using Mapbox services in R, you'll need a valid Mapbox account with an __access token__.  Fortunately, Mapbox has generously provided a coupon code for you to use as workshop participants.  To set up your account, visit https://account.mapbox.com/auth/signup/ to establish an account - all you need to provide is an email address to sign up!  Fill out the form and verify your account through the email Mapbox sends you; you'll be taken directly to your Mapbox account dashboard page.  

Note the "default public token" that appears on your screen - you'll come back to this page in a moment.  First, look to the right side of your screen and click "View billing."  This is where Mapbox will handle your billing information.  Nothing you'll do today will be intensive enough to incur charges - but your next three months of work will be covered by the coupons Mapbox has provided to this workshop.  Scroll down and enter the coupon code you've received in the appropriate box, then click __Add__.  Once you've entered your coupon code, return to your Mapbox dashboard.  Copy the access token that appears on your screen to your clipboard, then return to R.  

### Loading mapboxapi and setting your access token

All features in mapboxapi require a valid Mapbox access token to work.  Now that you have yours in hand, you can set yours up!  Load the mapboxapi package and install your token as follows:  

```{r install-token, eval = FALSE}
my_token <- "pk.eyJ1IjoidXRqaW1teXgiLCJhIjoiY2tnMmI1OWRpMDZsdDJxb2Y4MjdnZmxpMyJ9.ImwwUvDQpod7-B0YnIUytw"

library(mapboxapi)
mb_access_token(my_token, install = TRUE)

```

The optional argument `install = TRUE` saves the token to your .Renviron, allowing you to use mapboxapi functions in the future without having to worry about setting your token.  To use this feature, restart your R session.  

# Using Mapbox maps in R

The most well-known feature of Mapbox services is its ability to create stunning web maps which are used on applications all around the world.  While mapboxapi is not an interface to [Mapbox GL JS](https://docs.mapbox.com/mapbox-gl-js/api/), Mapbox's JavaScript library for building web maps, it does include some tools to help you use Mapbox maps in your R projects.  This is important as the [Mapbox Terms of Service](https://www.mapbox.com/legal/tos/) require that Mapbox API outputs be visualized on Mapbox maps.  

## Visualizing Mapbox "styles"

Mapbox maps are accessed through _styles_, which are custom design configurations applied to OpenStreetMap or even user-generated vector map tilesets.  You'll learn how to create and use your own map style with Mapbox later in this workshop.  However, Mapbox provides a number of their styles to all users with a Mapbox access token.  The most recent versions of these styles (as of the workshop date) are as follows:

* `streets-v11`: [The core Mapbox Streets basemap](https://www.mapbox.com/maps/streets)
* `outdoors-v11`: [A basemap designed for outdoor recreation uses](https://www.mapbox.com/maps/outdoors)
* `light-v10`: [A light, greyscale background suitable for thematic overlay](https://www.mapbox.com/maps/light)
* `dark-v10`: [A dark basemap suitable for thematic overlay](https://www.mapbox.com/maps/dark)
* `satellite-v9`: [A global satellite basemap derived from MODIS, Landsat, & proprietary imagery sources](https://www.mapbox.com/maps/satellite)
* `satellite-streets-v11`: The satellite basemap with a streets overlay

One of the most popular R packages for interactive data visualization in R is the [Leaflet package](https://rstudio.github.io/leaflet/) maintained by RStudio, which wraps the [Leaflet JavaScript library](https://leafletjs.com/) for web mapping.  

Let's load the leaflet and mapboxapi libraries and set up an interactive map: 

```{r mapbox-map}
library(leaflet)
library(mapboxapi)

mapbox_map <- leaflet() %>%
  addMapboxTiles(style_id = "streets-v11",
                 username = "mapbox") 

mapbox_map
```

We get a browseable Leaflet map using Mapbox tiles as a basemap.  

## Using the Mapbox Search API

Once we've set up our Leaflet map with a Mapbox basemap, we'll likely want to focus it on a specific location.  mapboxapi includes functionality for R users to interact with the [Mapbox Search API](https://docs.mapbox.com/api/search/).  Implemented functions include `mb_geocode()` for _forward geocoding_, which refers to the conversion of a description of a place (like an address) into longitude/latitude coordinates; and `mb_reverse_geocode()`, which converts coordinates into a place description.  

Both functions default to using the `mapbox.places` API endpoint, which is to be used for _temporary geocoding_.  This means that the endpoint cannot be used to store geocoded information nor can it be used for batch geocoding (e.g., a spreadsheet of addresses).  These tasks are permissible with the `mapbox.places-permanent` endpoint, which is not included with free accounts.  In turn, R users looking for free batch geocoding solutions should use other packages [like the tidygeocoder package](https://jessecambon.github.io/tidygeocoder/).  Mapbox geocoding with the `mapbox.places` endpoint _can_ be used to focus web maps and guide navigation services, which will be illustrated in the following sections.  

Let's use `mb_geocode()` to identify the coordinates representing the University of Pennsylvania (specifically here, the university bookstore).

```{r geocode-CSUB}
CSUB <- mb_geocode("96 Falmouth St, Portland, ME 04103")

CSUB
```


```{r view-CSUB}
mapbox_map %>%
  setView(lng = CSUB[1],
          lat = CSUB[2],
          zoom = 14)

```

## Build An isochrone map for the CSUB community 

```{r CSUB-isochrones}
CSUB_isochrones <- mb_isochrone(CSUB,
                                profile = "driving",
                                time = c(4, 8, 12))

CSUB_isochrones
```

```{r map-isochrones}
colors <- viridisLite::viridis(3)

mapbox_map %>%
  addPolygons(data = CSUB_isochrones,
              color = rev(colors),
              fillColor = rev(colors),
              fillOpacity = 0.5, 
              opacity = 1, 
              weight = 0.2) %>%
  addLegend(labels = c(4, 8, 12),
            colors = colors,
            title = "Drive-time<br/>around CSUB")
```
An **isochrone map** (or chart/diagram) in geography and urban planning is "a map showing areas related to isochrones between different points. ... In hydrology and transportation planning isochrone maps are commonly used to depict areas of equal travel time."

The filled areas represent the estimated reachable area around CSUB without traffic. Currently, the Mapbox API does not support traffic-adjusted isochrones, so isochrone results should be interpreted appropriately depending on what you plan to represent.


## References



This tutorial (case study) is built using the official package reference material available at https://www.mapbox.com/.


https://blog.mapbox.com/building-with-isochrones-3dc04a061a84

Walker's Mapbox introduction:https://blog.mapbox.com/labels-in-studio-6b399777f66b

https://blog.mapbox.com/painting-with-mapbox-studio-telling-stories-with-detail-48049da7bee5